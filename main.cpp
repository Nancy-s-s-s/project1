#include "sm4_simd.h"
#include <stdio.h>
#include <string.h>

int main() {
    // 示例密钥 (16字节)
    const uint8_t key[16] = {
        0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
        0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10
    };

    // 8组128位明文数据 (128字节)
    uint8_t plaintext[128] = {
        // 组1: ASCII "SM4 Block 1: ABC"
        0x53, 0x4D, 0x34, 0x20, 0x42, 0x6C, 0x6F, 0x63,
        0x6B, 0x20, 0x31, 0x3A, 0x20, 0x41, 0x42, 0x43,

        // 组2: ASCII "SM4 Block 2: DEF"
        0x53, 0x4D, 0x34, 0x20, 0x42, 0x6C, 0x6F, 0x63,
        0x6B, 0x20, 0x32, 0x3A, 0x20, 0x44, 0x45, 0x46,

        // 组3: 0x00-0x0F
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
        0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,

        // 组4: 0x10-0x1F
        0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
        0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,

        // 组5: 全零
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

        // 组6: 全FF
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,

        // 组7: 递增模式
        0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
        0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,

        // 组8: 递减模式
        0x2F, 0x2E, 0x2D, 0x2C, 0x2B, 0x2A, 0x29, 0x28,
        0x27, 0x26, 0x25, 0x24, 0x23, 0x22, 0x21, 0x20
    };

    uint8_t ciphertext[128];  // 密文缓冲区
    uint8_t decrypted[128];   // 解密缓冲区

    // 初始化密钥
    SM4_Key sm4_key;
    SM4_KeyInit(key, &sm4_key);

    // 并行加密8个数据块
    SM4_Encrypt_x8(plaintext, ciphertext, &sm4_key);
    printf("Encryption completed. %ld bytes processed.\n", sizeof(plaintext));

    // 并行解密8个数据块
    SM4_Decrypt_x8(ciphertext, decrypted, &sm4_key);
    printf("Decryption completed. %ld bytes processed.\n", sizeof(ciphertext));

    // 验证解密结果
    if (memcmp(plaintext, decrypted, sizeof(plaintext)) == 0) {
        printf("SUCCESS: Decrypted text matches original plaintext!\n");

        // 打印第一组数据验证
        printf("\nBlock 1 original: ");
        for (int i = 0; i < 16; i++) printf("%02X ", plaintext[i]);

        printf("\nBlock 1 decrypted: ");
        for (int i = 0; i < 16; i++) printf("%02X ", decrypted[i]);
        printf("\n");
    }
    else {
        printf("ERROR: Decryption failed! Mismatch detected.\n");
    }

    // 清理密钥
    SM4_KeyDelete(&sm4_key);
    return 0;
}
